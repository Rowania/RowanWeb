//! `SeaORM` Entity, @generated by sea-orm-codegen 1.1.14

use chrono::{DateTime, Utc};
use sea_orm::entity::prelude::*;
use serde::{Deserialize, Serialize};

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq, Serialize, Deserialize)]
#[sea_orm(table_name = "comments")]
pub struct Model {
    #[sea_orm(primary_key)]
    pub id: i32,
    pub note_metadata_id: Option<i32>,
    pub essay_id: Option<i32>,
    pub visitor_profile_id: i32,
    #[sea_orm(column_type = "Text")]
    pub content: String,
    pub parent_id: Option<i32>,
    #[sea_orm(column_type = "custom(\"DATETIME\")")]
    pub created_at: DateTime<Utc>,
    pub is_approved: bool,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "Entity",
        from = "Column::ParentId",
        to = "Column::Id",
        on_update = "NoAction",
        on_delete = "SetNull"
    )]
    SelfRef,
    #[sea_orm(
        belongs_to = "super::essays::Entity",
        from = "Column::EssayId",
        to = "super::essays::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Essays,
    #[sea_orm(
        belongs_to = "super::notes_metadata::Entity",
        from = "Column::NoteMetadataId",
        to = "super::notes_metadata::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    NotesMetadata,
    #[sea_orm(
        belongs_to = "super::visitor_profiles::Entity",
        from = "Column::VisitorProfileId",
        to = "super::visitor_profiles::Column::Id",
        on_update = "NoAction",
        on_delete = "Restrict"
    )]
    VisitorProfiles,
}

impl Related<super::essays::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Essays.def()
    }
}

impl Related<super::notes_metadata::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::NotesMetadata.def()
    }
}

impl Related<super::visitor_profiles::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::VisitorProfiles.def()
    }
}

impl ActiveModelBehavior for ActiveModel {}
